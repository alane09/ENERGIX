import { formatDate, formatNumber } from "@/lib/utils"
import {
  ChartConfig,
  GeneratedReport,
  ReportGenerationOptions,
  ReportSection
} from "@/types/report"
import { jsPDF } from "jspdf"
import "jspdf-autotable"
import { AIAnalysisService } from "./ai-analysis"

export class PDFGeneratorService {
  private doc: jsPDF
  private currentY: number
  private pageWidth: number
  private pageHeight: number
  private margins = {
    top: 20,
    bottom: 20,
    left: 14,
    right: 14
  }
  private colors = {
    primary: "#4CAF50",
    secondary: "#2196F3",
    text: "#333333",
    lightGray: "#757575",
    background: "#FFFFFF"
  }
  private fonts = {
    regular: "helvetica",
    bold: "helvetica",  // Use regular helvetica since bold is not available
    size: {
      title: 18,
      subtitle: 14,
      heading: 12,
      normal: 10,
      small: 8
    }
  }

  constructor() {
    this.doc = new jsPDF()
    this.pageWidth = this.doc.internal.pageSize.getWidth()
    this.pageHeight = this.doc.internal.pageSize.getHeight()
    this.currentY = this.margins.top
  }

  public async generateReport(options: ReportGenerationOptions): Promise<GeneratedReport> {
    const startTime = Date.now()
    const { template, data, styling } = options

    // Apply custom styling if provided
    if (styling) {
      this.applyCustomStyling(styling)
    }

    // Generate report sections
    const sections: ReportSection[] = []

    // Add header
    if (template.sections.header) {
      await this.addHeader(data.metadata.title, template.sections.header.style)
      sections.push({
        title: "Header",
        type: "text",
        content: data.metadata.title
      })
    }

    // Add summary if data is available
    if (template.sections.summary && data.consumption) {
      const summarySection = await this.addSummary(data.consumption, template.sections.summary.style)
      sections.push(summarySection)
    }

    // Add charts if enabled and data is available
    if (template.sections.dataAnalysis?.charts && data.consumption) {
      const chartSections = await this.addCharts(data.consumption, template.sections.dataAnalysis.style)
      sections.push(...chartSections)
    }

    // Add AI analysis if enabled
    if (template.sections.aiAnalysis && data.consumption) {
      const aiAnalysis = await AIAnalysisService.analyzeConsumptionTrends(data.consumption)
      const aiSections = await this.addAIAnalysis(aiAnalysis, template.sections.aiAnalysis.style)
      sections.push(...aiSections)
    }

    // Add footer if enabled
    if (template.sections.footer) {
      this.addFooter(template.sections.footer)
      sections.push({
        title: "Footer",
        type: "text",
        content: "Generated by COFICAB Energy Management System"
      })
    }

    // Save the PDF
    const fileName = `${data.metadata.title.replace(/\s+/g, '_')}_${formatDate(new Date().toISOString())}.pdf`
    this.doc.save(fileName)

    // Return report metadata
    return {
      metadata: data.metadata,
      content: sections,
      statistics: {
        pageCount: this.doc.getNumberOfPages(),
        chartCount: sections.filter(s => s.type === 'chart').length,
        tableCount: sections.filter(s => s.type === 'table').length,
        generationTime: Date.now() - startTime
      },
      downloadUrl: fileName
    }
  }

  private applyCustomStyling(styling: any): void {
    if (styling.colors) {
      this.colors = { ...this.colors, ...styling.colors }
    }
    if (styling.fonts) {
      this.fonts = { ...this.fonts, ...styling.fonts }
    }
  }

  private async addHeader(title: string, style?: any): Promise<void> {
    // Add logo
    const logoPath = '/COFICAB_LOGO.jpeg';
    this.doc.addImage(logoPath, 'JPEG', this.margins.left, this.currentY, 40, 20);

    // Add title with offset to accommodate logo
    this.doc.setFont("helvetica")
    this.doc.setFontSize(this.fonts.size.title)
    this.doc.setTextColor(this.colors.primary)
    this.doc.text(title, this.margins.left, this.currentY + 10)

    // Add date
    this.currentY += 20
    this.doc.setFont(this.fonts.regular)
    this.doc.setFontSize(this.fonts.size.normal)
    this.doc.setTextColor(this.colors.lightGray)
    this.doc.text(`Généré le: ${formatDate(new Date().toISOString())}`, this.margins.left, this.currentY)

    // Add separator line
    this.currentY += 10
    this.doc.setDrawColor(this.colors.primary)
    this.doc.setLineWidth(0.5)
    this.doc.line(this.margins.left, this.currentY, this.pageWidth - this.margins.right, this.currentY)

    this.currentY += 10
  }

  private async addSummary(data: any[] = [], style?: any): Promise<ReportSection> {
    const section: ReportSection = {
      title: "Résumé",
      type: "text",
      content: {},
      style
    }

    this.doc.setFont("helvetica")
    this.doc.setFontSize(this.fonts.size.subtitle)
    this.doc.setTextColor(this.colors.text)
    this.doc.text("Résumé", this.margins.left, this.currentY)

    this.currentY += 10
    this.doc.setFont(this.fonts.regular)
    this.doc.setFontSize(this.fonts.size.normal)

    if (data.length === 0) {
      const noDataText = "Aucune donnée disponible pour le résumé."
      this.doc.text(noDataText, this.margins.left, this.currentY)
      section.content = [noDataText]
      return section
    }

    // Calculate summary statistics
    const totalConsumption = data.reduce((sum, d) => sum + d.consumption, 0)
    const avgConsumption = totalConsumption / data.length
    
    const summaryText = [
      `Consommation totale: ${formatNumber(totalConsumption)} L`,
      `Consommation moyenne: ${formatNumber(avgConsumption)} L`,
      `Période: ${formatDate(data[0].date)} - ${formatDate(data[data.length - 1].date)}`,
      `Nombre d'enregistrements: ${data.length}`
    ]

    summaryText.forEach(text => {
      this.doc.text(text, this.margins.left, this.currentY)
      this.currentY += 6
    })

    section.content = summaryText
    return section
  }

  private async addCharts(data: any[], style?: any): Promise<ReportSection[]> {
    const sections: ReportSection[] = []

    // Consumption over time chart
    const timeChartConfig: ChartConfig = {
      type: 'line',
      data: {
        labels: data.map(d => formatDate(d.date)),
        datasets: [{
          label: 'Consommation',
          data: data.map(d => d.consumption)
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    }

    // Add chart title
    this.checkPageBreak()
    this.doc.setFont("helvetica")
    this.doc.setFontSize(this.fonts.size.subtitle)
    this.doc.text("Évolution de la consommation", this.margins.left, this.currentY)
    
    // Chart would be added here using a chart library
    // For now, we'll just add a placeholder
    this.currentY += 10
    this.doc.setDrawColor(this.colors.lightGray)
    this.doc.setFillColor(this.colors.background)
    this.doc.rect(this.margins.left, this.currentY, this.pageWidth - this.margins.left - this.margins.right, 100, 'FD')
    
    sections.push({
      title: "Évolution de la consommation",
      type: "chart",
      content: timeChartConfig,
      style
    })

    this.currentY += 110

    return sections
  }

  private async addAIAnalysis(analysis: any, style?: any): Promise<ReportSection[]> {
    const sections: ReportSection[] = []

    this.checkPageBreak()
    this.doc.setFont("helvetica")
    this.doc.setFontSize(this.fonts.size.subtitle)
    this.doc.text("Analyse IA", this.margins.left, this.currentY)

    this.currentY += 10
    this.doc.setFont(this.fonts.regular)
    this.doc.setFontSize(this.fonts.size.normal)

    // Add trends
    if (analysis.trends.length > 0) {
      this.doc.setFont("helvetica")
      this.doc.text("Tendances détectées:", this.margins.left, this.currentY)
      this.currentY += 6
      this.doc.setFont(this.fonts.regular)
      
      analysis.trends.forEach((trend: any) => {
        this.doc.text(`• ${trend.description}`, this.margins.left + 5, this.currentY)
        this.currentY += 6
      })

      sections.push({
        title: "Tendances",
        type: "analysis",
        content: analysis.trends,
        style
      })
    }

    // Add recommendations
    if (analysis.recommendations.length > 0) {
      this.currentY += 4
      this.doc.setFont("helvetica")
      this.doc.text("Recommandations:", this.margins.left, this.currentY)
      this.currentY += 6
      this.doc.setFont(this.fonts.regular)
      
      analysis.recommendations.forEach((rec: any) => {
        this.doc.text(`• ${rec.description}`, this.margins.left + 5, this.currentY)
        this.currentY += 6
        rec.actionItems.forEach((item: string) => {
          this.doc.text(`  - ${item}`, this.margins.left + 10, this.currentY)
          this.currentY += 6
        })
      })

      sections.push({
        title: "Recommandations",
        type: "analysis",
        content: analysis.recommendations,
        style
      })
    }

    return sections
  }

  private addFooter(footerConfig: any): void {
    const totalPages = this.doc.getNumberOfPages()
    
    for (let i = 1; i <= totalPages; i++) {
      this.doc.setPage(i)
      
      if (footerConfig.pageNumber) {
        this.doc.setFont(this.fonts.regular)
        this.doc.setFontSize(this.fonts.size.small)
        this.doc.setTextColor(this.colors.lightGray)
        this.doc.text(
          `Page ${i} sur ${totalPages}`,
          this.pageWidth / 2,
          this.pageHeight - this.margins.bottom,
          { align: 'center' }
        )
      }
      
      if (footerConfig.companyInfo) {
        this.doc.text(
          'COFICAB - Gestion Énergétique',
          this.margins.left,
          this.pageHeight - this.margins.bottom
        )
      }
    }
  }

  private checkPageBreak(): void {
    if (this.currentY > this.pageHeight - this.margins.bottom - 40) {
      this.doc.addPage()
      this.currentY = this.margins.top
    }
  }
}
